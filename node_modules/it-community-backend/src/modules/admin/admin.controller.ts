import {
  Controller,
  Get,
  Patch,
  Delete,
  Param,
  Body,
  UseGuards,
  Request,
  ParseUUIDPipe,
  Query,
  ParseIntPipe,
  DefaultValuePipe,
  Post,
} from '@nestjs/common';
import { AdminService } from './admin.service';
import { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';
import { RolesGuard } from '../../auth/guards/roles.guard';
import { Roles } from '../../auth/decorators/roles.decorator';
import { UserRole } from '../../../generated/prisma';

@Controller('admin')
@UseGuards(JwtAuthGuard, RolesGuard)
@Roles(UserRole.ADMIN)
export class AdminController {
  constructor(private readonly adminService: AdminService) {}

  // Dashboard Overview
  @Get('dashboard/overview')
  async getDashboardOverview() {
    return this.adminService.getDashboardOverview();
  }

  @Get('dashboard/metrics')
  async getDashboardMetrics() {
    return this.adminService.getDashboardMetrics();
  }

  @Get('dashboard/realtime')
  async getRealTimeData() {
    return this.adminService.getRealTimeData();
  }

  // User Management
  @Get('users')
  async getAllUsers(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,
    @Query('role') role?: string,
    @Query('search') search?: string,
    @Query('status') status?: string,
  ) {
    return this.adminService.getAllUsers({ page, limit, role, search, status });
  }

  @Get('users/:id')
  async getUserDetails(@Param('id', ParseUUIDPipe) id: string) {
    return this.adminService.getUserDetails(id);
  }

  @Patch('users/:id/role')
  async updateUserRole(
    @Param('id', ParseUUIDPipe) id: string,
    @Body('role') newRole: UserRole,
  ) {
    return this.adminService.updateUserRole(id, newRole);
  }

  @Patch('users/:id/status')
  async updateUserStatus(
    @Param('id', ParseUUIDPipe) id: string,
    @Body('status') status: 'active' | 'suspended' | 'deleted',
  ) {
    return this.adminService.updateUserStatus(id, status);
  }

  @Delete('users/:id')
  async deleteUser(@Param('id', ParseUUIDPipe) id: string) {
    await this.adminService.deleteUser(id);
    return { message: 'User deleted successfully' };
  }

  // Content Moderation
  @Get('content/projects')
  async getAllProjects(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('type') type?: string,
  ) {
    return this.adminService.getAllProjects({ page, limit, status, search, type });
  }

  @Get('content/projects/:id')
  async getProjectDetails(@Param('id', ParseUUIDPipe) id: string) {
    return this.adminService.getProjectDetails(id);
  }

  @Post('content/projects/:id/approve')
  async approveProject(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() body: { notes?: string },
    @Request() req: any,
  ) {
    return this.adminService.approveProject(id, req.user.id, body.notes);
  }

  @Post('content/projects/:id/reject')
  async rejectProject(
    @Param('id', ParseUUIDPipe) id: string,
    @Body() body: { reason: string },
    @Request() req: any,
  ) {
    return this.adminService.rejectProject(id, req.user.id, body.reason);
  }

  @Delete('content/projects/:id')
  async deleteProject(@Param('id', ParseUUIDPipe) id: string) {
    await this.adminService.deleteProject(id);
    return { message: 'Project deleted successfully' };
  }

  @Get('content/jobs')
  async getAllJobs(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('type') type?: string,
  ) {
    return this.adminService.getAllJobs({ page, limit, status, search, type });
  }

  @Get('content/jobs/:id')
  async getJobDetails(@Param('id', ParseUUIDPipe) id: string) {
    return this.adminService.getJobDetails(id);
  }

  @Delete('content/jobs/:id')
  async deleteJob(@Param('id', ParseUUIDPipe) id: string) {
    await this.adminService.deleteJob(id);
    return { message: 'Job deleted successfully' };
  }

  @Get('content/events')
  async getAllEvents(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,
    @Query('status') status?: string,
    @Query('search') search?: string,
    @Query('type') type?: string,
  ) {
    return this.adminService.getAllEvents({ page, limit, status, search, type });
  }

  @Get('content/events/:id')
  async getEventDetails(@Param('id', ParseUUIDPipe) id: string) {
    return this.adminService.getEventDetails(id);
  }

  @Delete('content/events/:id')
  async deleteEvent(@Param('id', ParseUUIDPipe) id: string) {
    await this.adminService.deleteEvent(id);
    return { message: 'Event deleted successfully' };
  }

  // Advanced Analytics
  @Get('analytics/users')
  async getUserAnalytics(
    @Query('period') period?: '7d' | '30d' | '90d' | '1y',
    @Query('groupBy') groupBy?: 'day' | 'week' | 'month',
  ) {
    return this.adminService.getUserAnalytics(period, groupBy);
  }

  @Get('analytics/content')
  async getContentAnalytics(
    @Query('period') period?: '7d' | '30d' | '90d' | '1y',
    @Query('type') type?: 'projects' | 'events' | 'jobs',
  ) {
    return this.adminService.getContentAnalytics(period, type);
  }

  @Get('analytics/engagement')
  async getEngagementAnalytics(
    @Query('period') period?: '7d' | '30d' | '90d' | '1y',
  ) {
    return this.adminService.getEngagementAnalytics(period);
  }

  @Get('analytics/trends')
  async getTrendAnalytics(
    @Query('period') period?: '7d' | '30d' | '90d' | '1y',
    @Query('metric') metric?: 'users' | 'projects' | 'events' | 'jobs',
  ) {
    return this.adminService.getTrendAnalytics(period, metric);
  }

  // System Health & Monitoring
  @Get('system/health')
  async getSystemHealth() {
    return this.adminService.getSystemHealth();
  }

  @Get('system/performance')
  async getSystemPerformance() {
    return this.adminService.getSystemPerformance();
  }

  @Get('system/logs')
  async getSystemLogs(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(50), ParseIntPipe) limit: number,
    @Query('level') level?: 'error' | 'warn' | 'info' | 'debug',
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    return this.adminService.getSystemLogs({ page, limit, level, startDate, endDate });
  }

  // Recent Activity
  @Get('activity/recent')
  async getRecentActivity(
    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,
    @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit: number,
    @Query('type') type?: string,
  ) {
    return this.adminService.getRecentActivity({ page, limit, type });
  }

  // Quick Actions
  @Get('quick-actions')
  async getQuickActions() {
    return this.adminService.getQuickActions();
  }

  @Post('quick-actions/bulk-approve')
  async bulkApproveContent(@Body() body: { type: string; ids: string[] }) {
    return this.adminService.bulkApproveContent(body.type, body.ids);
  }

  @Post('quick-actions/bulk-delete')
  async bulkDeleteContent(@Body() body: { type: string; ids: string[] }) {
    return this.adminService.bulkDeleteContent(body.type, body.ids);
  }
} 