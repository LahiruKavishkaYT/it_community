// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  PROFESSIONAL
  COMPANY
  ADMIN
}

enum ProjectType {
  STUDENT_PROJECT
  PRACTICE_PROJECT
}

enum ProjectStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  PUBLISHED
  ARCHIVED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?  // Made optional for OAuth users
  name      String
  role      UserRole @default(STUDENT)
  avatar    String?
  bio       String?
  skills    String[]
  company   String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth fields
  googleId  String?  @unique
  githubId  String?  @unique
  provider  String?  // 'local', 'google', 'github'

  // Relations
  projects          Project[]
  events            Event[]
  jobs              Job[]
  feedback          ProjectFeedback[]
  jobApplications   JobApplication[]
  jobBookmarks      JobBookmark[]
  eventAttendances  EventAttendee[]
  activities        Activity[]
  projectReviews    Project[]       @relation("ProjectReviews")
  
  // Notification relations
  notifications     Notification[]
  notificationSettings UserNotificationSettings?

  // Security relations
  refreshTokens     RefreshToken[]

  @@map("users")
}

model Project {
  id                String        @id @default(cuid())
  title             String
  description       String
  projectType       ProjectType   @default(STUDENT_PROJECT)
  status            ProjectStatus @default(PENDING_APPROVAL)
  author            User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          String
  technologies      String[]
  githubUrl         String?
  liveUrl           String?
  imageUrl          String?
  architecture      String?
  learningObjectives String[]
  keyFeatures       String[]
  
  // Learning project specific fields
  projectCategory   String?       // Frontend, Backend, Full Stack, etc.
  difficultyLevel   String?       // Beginner, Intermediate, Advanced
  estimatedTime     String?
  isLearningProject Boolean       @default(false)
  
  // Approval workflow fields
  submittedAt       DateTime?
  reviewedBy        User?         @relation("ProjectReviews", fields: [reviewedById], references: [id])
  reviewedById      String?
  reviewedAt        DateTime?
  approvalNotes     String?
  rejectionReason   String?
  
  // Visibility and analytics
  isPublic          Boolean       @default(false)
  views             Int           @default(0)
  likes             Int           @default(0)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  feedback ProjectFeedback[]

  @@map("projects")
}

model ProjectFeedback {
  id        String   @id @default(cuid())
  content   String
  rating    Int      @db.SmallInt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@map("project_feedback")
}

enum EventType {
  WORKSHOP
  NETWORKING
  HACKATHON
  SEMINAR
  RECRUITMENT_DRIVE
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum AttendeeStatus {
  PENDING
  APPROVED
  DECLINED
  WAITLIST
}

enum LocationType {
  ONSITE
  VIRTUAL
}

model Event {
  id               String    @id @default(cuid())
  title            String
  description      String
  organizer        User      @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId      String
  
  // Enhanced date/time fields
  startDateTime    DateTime
  endDateTime      DateTime?
  date             DateTime? // Legacy field for backward compatibility
  
  // Enhanced location fields
  locationType     LocationType @default(ONSITE)
  venue            String?
  virtualEventLink String?
  location         String? // Legacy field for backward compatibility
  
  type             EventType
  status           EventStatus @default(PUBLISHED)
  maxAttendees     Int?
  currentAttendees Int       @default(0)
  imageUrl         String?
  
  // Enhanced food and drinks coordination
  foodProvided     Boolean   @default(false)
  drinksProvided   Boolean   @default(false)
  foodAndDrinksProvided Boolean @default(false)
  foodDetails      String?
  drinkDetails     String?
  dietaryRestrictions String[]
  alcoholicBeverages Boolean @default(false)
  
  // Registration settings
  requireApproval  Boolean   @default(false)
  registrationDeadline DateTime
  registrationInstructions String?
  requiredFields   String[]
  
  // Additional event details
  tags             String[]
  prerequisites    String[]
  agenda           String?
  speakers         String[]
  eventFee         Float?    @default(0)
  eventUrl         String?
  isVirtual        Boolean   @default(false)
  virtualMeetingLink String?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  attendees        EventAttendee[]

  @@map("events")
}

model EventAttendee {
  id          String   @id @default(cuid())
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  applicant   User     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String
  status      AttendeeStatus @default(APPROVED)
  registeredAt DateTime @default(now())
  approvedAt  DateTime?
  checkedIn   Boolean  @default(false)
  checkedInAt DateTime?
  
  // Additional attendee information
  dietaryRestrictions String[]
  emergencyContact    String?
  notes              String?

  @@unique([eventId, applicantId])
  @@map("event_attendees")
}

enum JobType {
  FULL_TIME
  PART_TIME
  INTERNSHIP
  CONTRACT
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWED
  OFFERED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  LEAD_LEVEL
  EXECUTIVE
}

model Job {
  id              String          @id @default(cuid())
  title           String
  company         User            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  description     String
  requirements    String[]
  location        String
  type            JobType
  status          JobStatus       @default(PUBLISHED)
  experienceLevel ExperienceLevel @default(MID_LEVEL)
  
  // Salary and compensation
  salaryMin       Int?
  salaryMax       Int?
  salaryCurrency  String?         @default("USD")
  salaryPeriod    String?         @default("yearly") // yearly, monthly, hourly
  equity          Boolean         @default(false)
  benefits        String[]
  
  // Work arrangements
  remote          Boolean         @default(false)
  hybrid          Boolean         @default(false)
  onSite          Boolean         @default(true)
  
  // Skills and matching
  requiredSkills  String[]
  preferredSkills String[]
  technologies    String[]
  
  // Job details
  department      String?
  reportingTo     String?
  teamSize        String?
  jobFunction     String?         // Engineering, Design, Marketing, etc.
  
  // Application process
  applicationDeadline DateTime?
  expectedStartDate   DateTime?
  interviewProcess    String?
  
  // SEO and visibility
  tags            String[]
  featured        Boolean         @default(false)
  urgent          Boolean         @default(false)
  
  // Analytics
  views           Int             @default(0)
  impressions     Int             @default(0)
  
  postedAt        DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  closedAt        DateTime?

  // Relations
  applicants      JobApplication[]
  bookmarks       JobBookmark[]

  @@map("jobs")
}

model JobApplication {
  id              String            @id @default(cuid())
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId           String
  applicant       User              @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId     String
  status          ApplicationStatus @default(PENDING)
  
  // Application content
  coverLetter     String?
  resumeUrl       String?
  portfolioUrl    String?
  expectedSalary  Int?
  availability    String?
  relocatable     Boolean           @default(false)
  
  // Process tracking
  appliedAt       DateTime          @default(now())
  reviewedAt      DateTime?
  shortlistedAt   DateTime?
  interviewedAt   DateTime?
  offeredAt       DateTime?
  respondedAt     DateTime?
  
  // Feedback and notes
  recruiterNotes  String?
  rejectionReason String?
  rating          Int?              @db.SmallInt // 1-5 rating from recruiter
  
  // Skills matching score (calculated)
  skillsMatchScore Float?           @default(0) // 0-100 percentage match

  @@unique([jobId, applicantId])
  @@map("job_applications")
}

model JobBookmark {
  id          String   @id @default(cuid())
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now())

  @@unique([jobId, userId])
  @@map("job_bookmarks")
}

enum ActivityType {
  PROJECT_UPLOAD
  JOB_APPLICATION
  EVENT_REGISTRATION
  PROJECT_FEEDBACK
  EVENT_APPROVED
  EVENT_REJECTED
  JOB_APPROVED
  JOB_REJECTED
  APPLICATION_STATUS_UPDATED
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  action      String       // Human readable action description
  itemTitle   String       // Title of the item (project name, job title, event name)
  itemId      String?      // ID of the related item (optional)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime     @default(now())

  @@map("activities")
}

enum NotificationType {
  PROJECT_SUBMITTED
  PROJECT_APPROVED
  PROJECT_REJECTED
  PROJECT_NEEDS_APPROVAL
  SYSTEM_MESSAGE
  USER_WELCOME
  ADMIN_ALERT
  EVENT_NOTIFICATION
  JOB_NOTIFICATION
  APPLICATION_UPDATE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Notification {
  id          String             @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  priority    NotificationPriority @default(MEDIUM)
  
  // Target user (null for system-wide notifications)
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  
  // Related item (optional)
  itemId      String?            // ID of related project, job, event, etc.
  itemType    String?            // Type of related item (project, job, event, etc.)
  
  // Notification state
  isRead      Boolean            @default(false)
  isArchived  Boolean            @default(false)
  
  // Metadata
  metadata    Json?              // Additional data (e.g., project details, admin notes)
  
  createdAt   DateTime           @default(now())
  readAt      DateTime?
  expiresAt   DateTime?          // Optional expiration date

  @@map("notifications")
}

// User notification preferences
model UserNotificationSettings {
  id                    String   @id @default(cuid())
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @unique
  
  // Email notifications
  emailProjectUpdates   Boolean  @default(true)
  emailSystemMessages   Boolean  @default(true)
  emailAdminMessages    Boolean  @default(true)
  
  // Push notifications (for future mobile app)
  pushProjectUpdates    Boolean  @default(true)
  pushSystemMessages    Boolean  @default(true)
  pushAdminMessages     Boolean  @default(true)
  
  // In-app notifications
  inAppProjectUpdates   Boolean  @default(true)
  inAppSystemMessages   Boolean  @default(true)
  inAppAdminMessages    Boolean  @default(true)
  
  // Frequency settings
  digestFrequency       String   @default("immediate") // immediate, daily, weekly
  
  updatedAt             DateTime @updatedAt

  @@map("user_notification_settings")
}

// Refresh token model for JWT security
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique // Hashed refresh token
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}
