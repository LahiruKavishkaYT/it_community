// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  student
  professional
  company
  admin
}

enum EventType {
  workshop
  networking
  hackathon
  seminar
}

enum JobType {
  full_time
  part_time
  internship
  contract
}

enum RoadmapLevel {
  beginner
  intermediate
  advanced
}

// Models
model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String
  role     UserRole
  avatar   String?
  bio      String?
  skills   String[]
  company  String?
  location String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  projects          Project[]
  projectFeedback   ProjectFeedback[]
  organizedEvents   Event[]           @relation("EventOrganizer")
  attendedEvents    EventAttendee[]
  postedJobs        Job[]             @relation("JobPoster")
  jobApplications   JobApplication[]
  
  @@map("users")
}

model Project {
  id           String   @id @default(cuid())
  title        String
  description  String
  authorId     String
  technologies String[]
  githubUrl    String?
  liveUrl      String?
  imageUrl     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  author   User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  feedback ProjectFeedback[]
  
  @@map("projects")
}

model ProjectFeedback {
  id        String @id @default(cuid())
  content   String
  rating    Int    @db.SmallInt
  authorId  String
  projectId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  author  User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_feedback")
}

model Event {
  id           String    @id @default(cuid())
  title        String
  description  String
  organizerId  String
  date         DateTime
  location     String
  type         EventType
  maxAttendees Int?
  imageUrl     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organizer User            @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  attendees EventAttendee[]
  
  @@map("events")
}

model EventAttendee {
  id      String @id @default(cuid())
  userId  String
  eventId String
  
  createdAt DateTime @default(now())
  
  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
  @@map("event_attendees")
}

model Job {
  id           String   @id @default(cuid())
  title        String
  company      String
  companyId    String
  description  String
  requirements String[]
  location     String
  type         JobType
  salary       String?
  remote       Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  poster       User             @relation("JobPoster", fields: [companyId], references: [id], onDelete: Cascade)
  applications JobApplication[]
  
  @@map("jobs")
}

model JobApplication {
  id     String @id @default(cuid())
  userId String
  jobId  String
  
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
  @@map("job_applications")
}

model CareerPath {
  id          String @id @default(cuid())
  title       String
  description String
  skills      String[]
  roles       String[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  roadmap RoadmapItem[]
  
  @@map("career_paths")
}

model RoadmapItem {
  id             String       @id @default(cuid())
  title          String
  description    String
  level          RoadmapLevel
  estimatedTime  String
  resources      String[]
  careerPathId   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  careerPath CareerPath @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  
  @@map("roadmap_items")
} 